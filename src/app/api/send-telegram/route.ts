import { NextResponse } from "next/server";

// –ü—Ä–æ—Å—Ç–∞—è in-memory –∫–∞—Ä—Ç–∞ –¥–ª—è rate limit (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî Redis/Upstash)
const requestLog = new Map<string, number>();
const RATE_LIMIT_WINDOW = 60_000; // 1 –º–∏–Ω—É—Ç–∞
const MAX_REQUESTS = 3; // –ú–∞–∫—Å. –∫–æ–ª-–≤–æ –∑–∞—è–≤–æ–∫ —Å –æ–¥–Ω–æ–≥–æ IP –∑–∞ –æ–∫–Ω–æ

export async function POST(request: Request) {
    const ip =
        request.headers.get("x-forwarded-for")?.split(",")[0] ||
        request.headers.get("x-real-ip") ||
        "unknown";

    const now = Date.now();
    const prev = requestLog.get(ip) || 0;

    if (now - prev < RATE_LIMIT_WINDOW) {
        return NextResponse.json(
            { ok: false, error: "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ." },
            { status: 429 }
        );
    }
    requestLog.set(ip, now);

    const body = await request.json();

    // 1. Honeypot
    if (body.email && body.email.trim() !== "") {
        return NextResponse.json(
            { ok: false, error: "–ü–æ—Ö–æ–∂–µ, –≤—ã –±–æ—Ç ü§ñ" },
            { status: 400 }
        );
    }

    // –ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
    if (!body.name || body.name.trim().length === 0) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–ò–º—è' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è." },
            { status: 400 }
        );
    }
    if (body.name.length > 100) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–ò–º—è' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)." },
            { status: 400 }
        );
    }

    if (!body.contact || body.contact.trim().length === 0) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–ö–æ–Ω—Ç–∞–∫—Ç' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è." },
            { status: 400 }
        );
    }
    if (body.contact.length > 100) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–ö–æ–Ω—Ç–∞–∫—Ç' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)." },
            { status: 400 }
        );
    }

    if (!body.message || body.message.trim().length === 0) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–°–æ–æ–±—â–µ–Ω–∏–µ' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è." },
            { status: 400 }
        );
    }
    if (body.message.length > 2000) {
        return NextResponse.json(
            { ok: false, error: "–ü–æ–ª–µ '–°–æ–æ–±—â–µ–Ω–∏–µ' —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)." },
            { status: 400 }
        );
    }

    const token = process.env.TELEGRAM_BOT_TOKEN!;
    const chatId = process.env.TELEGRAM_CHAT_ID!;
    const siteUrl =
        request.headers.get("origin") ||
        request.headers.get("referer") ||
        "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

    const text =
        `üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞: ${siteUrl}\n` +
        `üë§ –ò–º—è: ${body.name}\n` +
        `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${body.contact}\n` +
        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${body.message}`;

    const resp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: chatId, text }),
    });

    if (!resp.ok) {
        const err = await resp.text();
        return NextResponse.json(
            { ok: false, error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram", details: err },
            { status: 500 }
        );
    }

    return NextResponse.json({ ok: true });
}
